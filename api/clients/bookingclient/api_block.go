/*
 * apaleo Booking API
 *
 * Resources and methods to manage guest journeys.
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bookingclient

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// BlockApiService BlockApi service
type BlockApiService service

type ApiBookingBlocksByIdDeleteRequest struct {
	ctx _context.Context
	ApiService *BlockApiService
	id string
}


func (r ApiBookingBlocksByIdDeleteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.BookingBlocksByIdDeleteExecute(r)
}

/*
 * BookingBlocksByIdDelete Delete a specific block
 * Use this call to delete a block. This is only possible as long as no reservation was picked up yet even if all of
them are canceled<br>You must have at least one of these scopes: 'blocks.manage, reservations.manage'.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The id of the block.
 * @return ApiBookingBlocksByIdDeleteRequest
 */
func (a *BlockApiService) BookingBlocksByIdDelete(ctx _context.Context, id string) ApiBookingBlocksByIdDeleteRequest {
	return ApiBookingBlocksByIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *BlockApiService) BookingBlocksByIdDeleteExecute(r ApiBookingBlocksByIdDeleteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockApiService.BookingBlocksByIdDelete")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/booking/v1/blocks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v MessageItemCollection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiBookingBlocksByIdGetRequest struct {
	ctx _context.Context
	ApiService *BlockApiService
	id string
	expand *[]string
}

func (r ApiBookingBlocksByIdGetRequest) Expand(expand []string) ApiBookingBlocksByIdGetRequest {
	r.expand = &expand
	return r
}

func (r ApiBookingBlocksByIdGetRequest) Execute() (BlockModel, *_nethttp.Response, error) {
	return r.ApiService.BookingBlocksByIdGetExecute(r)
}

/*
 * BookingBlocksByIdGet Returns a specific block.
 * Retrieves a block, specified by its ID.<br>You must have at least one of these scopes: 'blocks.read, reservations.read, reservations.manage'.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Id of the block to be retrieved.
 * @return ApiBookingBlocksByIdGetRequest
 */
func (a *BlockApiService) BookingBlocksByIdGet(ctx _context.Context, id string) ApiBookingBlocksByIdGetRequest {
	return ApiBookingBlocksByIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return BlockModel
 */
func (a *BlockApiService) BookingBlocksByIdGetExecute(r ApiBookingBlocksByIdGetRequest) (BlockModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BlockModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockApiService.BookingBlocksByIdGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/booking/v1/blocks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.expand != nil {
		localVarQueryParams.Add("expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v MessageItemCollection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBookingBlocksByIdHeadRequest struct {
	ctx _context.Context
	ApiService *BlockApiService
	id string
}


func (r ApiBookingBlocksByIdHeadRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.BookingBlocksByIdHeadExecute(r)
}

/*
 * BookingBlocksByIdHead Check if a block exists
 * Check if a block exists by id<br>You must have at least one of these scopes: 'blocks.read, reservations.read, reservations.manage'.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The id of the block.
 * @return ApiBookingBlocksByIdHeadRequest
 */
func (a *BlockApiService) BookingBlocksByIdHead(ctx _context.Context, id string) ApiBookingBlocksByIdHeadRequest {
	return ApiBookingBlocksByIdHeadRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *BlockApiService) BookingBlocksByIdHeadExecute(r ApiBookingBlocksByIdHeadRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodHead
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockApiService.BookingBlocksByIdHead")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/booking/v1/blocks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiBookingBlocksByIdPatchRequest struct {
	ctx _context.Context
	ApiService *BlockApiService
	id string
	body *[]Operation
}

func (r ApiBookingBlocksByIdPatchRequest) Body(body []Operation) ApiBookingBlocksByIdPatchRequest {
	r.body = &body
	return r
}

func (r ApiBookingBlocksByIdPatchRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.BookingBlocksByIdPatchExecute(r)
}

/*
 * BookingBlocksByIdPatch Allows to modify the block
 * You can replace From, To, GrossDailyRate and BlockedUnits<br>You must have at least one of these scopes: 'blocks.manage, reservations.manage'.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Id of the block to be modified.
 * @return ApiBookingBlocksByIdPatchRequest
 */
func (a *BlockApiService) BookingBlocksByIdPatch(ctx _context.Context, id string) ApiBookingBlocksByIdPatchRequest {
	return ApiBookingBlocksByIdPatchRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *BlockApiService) BookingBlocksByIdPatchExecute(r ApiBookingBlocksByIdPatchRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockApiService.BookingBlocksByIdPatch")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/booking/v1/blocks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v MessageItemCollection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiBookingBlocksGetRequest struct {
	ctx _context.Context
	ApiService *BlockApiService
	groupId *string
	propertyIds *[]string
	status *[]string
	unitGroupIds *[]string
	ratePlanIds *[]string
	timeSliceDefinitionIds *[]string
	unitGroupTypes *[]string
	timeSliceTemplate *string
	from *time.Time
	to *time.Time
	pageNumber *int32
	pageSize *int32
	expand *[]string
}

func (r ApiBookingBlocksGetRequest) GroupId(groupId string) ApiBookingBlocksGetRequest {
	r.groupId = &groupId
	return r
}
func (r ApiBookingBlocksGetRequest) PropertyIds(propertyIds []string) ApiBookingBlocksGetRequest {
	r.propertyIds = &propertyIds
	return r
}
func (r ApiBookingBlocksGetRequest) Status(status []string) ApiBookingBlocksGetRequest {
	r.status = &status
	return r
}
func (r ApiBookingBlocksGetRequest) UnitGroupIds(unitGroupIds []string) ApiBookingBlocksGetRequest {
	r.unitGroupIds = &unitGroupIds
	return r
}
func (r ApiBookingBlocksGetRequest) RatePlanIds(ratePlanIds []string) ApiBookingBlocksGetRequest {
	r.ratePlanIds = &ratePlanIds
	return r
}
func (r ApiBookingBlocksGetRequest) TimeSliceDefinitionIds(timeSliceDefinitionIds []string) ApiBookingBlocksGetRequest {
	r.timeSliceDefinitionIds = &timeSliceDefinitionIds
	return r
}
func (r ApiBookingBlocksGetRequest) UnitGroupTypes(unitGroupTypes []string) ApiBookingBlocksGetRequest {
	r.unitGroupTypes = &unitGroupTypes
	return r
}
func (r ApiBookingBlocksGetRequest) TimeSliceTemplate(timeSliceTemplate string) ApiBookingBlocksGetRequest {
	r.timeSliceTemplate = &timeSliceTemplate
	return r
}
func (r ApiBookingBlocksGetRequest) From(from time.Time) ApiBookingBlocksGetRequest {
	r.from = &from
	return r
}
func (r ApiBookingBlocksGetRequest) To(to time.Time) ApiBookingBlocksGetRequest {
	r.to = &to
	return r
}
func (r ApiBookingBlocksGetRequest) PageNumber(pageNumber int32) ApiBookingBlocksGetRequest {
	r.pageNumber = &pageNumber
	return r
}
func (r ApiBookingBlocksGetRequest) PageSize(pageSize int32) ApiBookingBlocksGetRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiBookingBlocksGetRequest) Expand(expand []string) ApiBookingBlocksGetRequest {
	r.expand = &expand
	return r
}

func (r ApiBookingBlocksGetRequest) Execute() (BlockListModel, *_nethttp.Response, error) {
	return r.ApiService.BookingBlocksGetExecute(r)
}

/*
 * BookingBlocksGet Returns a list of blocks
 * Returns a list of all blocks, filtered by the specified parameters. If no parameters are set, returns the entire list.<br>You must have at least one of these scopes: 'blocks.read, reservations.read, reservations.manage'.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiBookingBlocksGetRequest
 */
func (a *BlockApiService) BookingBlocksGet(ctx _context.Context) ApiBookingBlocksGetRequest {
	return ApiBookingBlocksGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return BlockListModel
 */
func (a *BlockApiService) BookingBlocksGetExecute(r ApiBookingBlocksGetRequest) (BlockListModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BlockListModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockApiService.BookingBlocksGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/booking/v1/blocks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.groupId != nil {
		localVarQueryParams.Add("groupId", parameterToString(*r.groupId, ""))
	}
	if r.propertyIds != nil {
		localVarQueryParams.Add("propertyIds", parameterToString(*r.propertyIds, "csv"))
	}
	if r.status != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status, "csv"))
	}
	if r.unitGroupIds != nil {
		localVarQueryParams.Add("unitGroupIds", parameterToString(*r.unitGroupIds, "csv"))
	}
	if r.ratePlanIds != nil {
		localVarQueryParams.Add("ratePlanIds", parameterToString(*r.ratePlanIds, "csv"))
	}
	if r.timeSliceDefinitionIds != nil {
		localVarQueryParams.Add("timeSliceDefinitionIds", parameterToString(*r.timeSliceDefinitionIds, "csv"))
	}
	if r.unitGroupTypes != nil {
		localVarQueryParams.Add("unitGroupTypes", parameterToString(*r.unitGroupTypes, "csv"))
	}
	if r.timeSliceTemplate != nil {
		localVarQueryParams.Add("timeSliceTemplate", parameterToString(*r.timeSliceTemplate, ""))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.to != nil {
		localVarQueryParams.Add("to", parameterToString(*r.to, ""))
	}
	if r.pageNumber != nil {
		localVarQueryParams.Add("pageNumber", parameterToString(*r.pageNumber, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.expand != nil {
		localVarQueryParams.Add("expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v MessageItemCollection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBookingBlocksPostRequest struct {
	ctx _context.Context
	ApiService *BlockApiService
	body *CreateBlockModel
	idempotencyKey *string
}

func (r ApiBookingBlocksPostRequest) Body(body CreateBlockModel) ApiBookingBlocksPostRequest {
	r.body = &body
	return r
}
func (r ApiBookingBlocksPostRequest) IdempotencyKey(idempotencyKey string) ApiBookingBlocksPostRequest {
	r.idempotencyKey = &idempotencyKey
	return r
}

func (r ApiBookingBlocksPostRequest) Execute() (BlockCreatedModel, *_nethttp.Response, error) {
	return r.ApiService.BookingBlocksPostExecute(r)
}

/*
 * BookingBlocksPost Creates a block
 * <br>You must have at least one of these scopes: 'blocks.create, reservations.manage'.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiBookingBlocksPostRequest
 */
func (a *BlockApiService) BookingBlocksPost(ctx _context.Context) ApiBookingBlocksPostRequest {
	return ApiBookingBlocksPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return BlockCreatedModel
 */
func (a *BlockApiService) BookingBlocksPostExecute(r ApiBookingBlocksPostRequest) (BlockCreatedModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BlockCreatedModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockApiService.BookingBlocksPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/booking/v1/blocks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.idempotencyKey != nil {
		localVarHeaderParams["Idempotency-Key"] = parameterToString(*r.idempotencyKey, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v MessageItemCollection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBookingBlockscountGetRequest struct {
	ctx _context.Context
	ApiService *BlockApiService
	groupId *string
	propertyIds *[]string
	status *[]string
	unitGroupIds *[]string
	ratePlanIds *[]string
	timeSliceDefinitionIds *[]string
	unitGroupTypes *[]string
	timeSliceTemplate *string
	from *time.Time
	to *time.Time
}

func (r ApiBookingBlockscountGetRequest) GroupId(groupId string) ApiBookingBlockscountGetRequest {
	r.groupId = &groupId
	return r
}
func (r ApiBookingBlockscountGetRequest) PropertyIds(propertyIds []string) ApiBookingBlockscountGetRequest {
	r.propertyIds = &propertyIds
	return r
}
func (r ApiBookingBlockscountGetRequest) Status(status []string) ApiBookingBlockscountGetRequest {
	r.status = &status
	return r
}
func (r ApiBookingBlockscountGetRequest) UnitGroupIds(unitGroupIds []string) ApiBookingBlockscountGetRequest {
	r.unitGroupIds = &unitGroupIds
	return r
}
func (r ApiBookingBlockscountGetRequest) RatePlanIds(ratePlanIds []string) ApiBookingBlockscountGetRequest {
	r.ratePlanIds = &ratePlanIds
	return r
}
func (r ApiBookingBlockscountGetRequest) TimeSliceDefinitionIds(timeSliceDefinitionIds []string) ApiBookingBlockscountGetRequest {
	r.timeSliceDefinitionIds = &timeSliceDefinitionIds
	return r
}
func (r ApiBookingBlockscountGetRequest) UnitGroupTypes(unitGroupTypes []string) ApiBookingBlockscountGetRequest {
	r.unitGroupTypes = &unitGroupTypes
	return r
}
func (r ApiBookingBlockscountGetRequest) TimeSliceTemplate(timeSliceTemplate string) ApiBookingBlockscountGetRequest {
	r.timeSliceTemplate = &timeSliceTemplate
	return r
}
func (r ApiBookingBlockscountGetRequest) From(from time.Time) ApiBookingBlockscountGetRequest {
	r.from = &from
	return r
}
func (r ApiBookingBlockscountGetRequest) To(to time.Time) ApiBookingBlockscountGetRequest {
	r.to = &to
	return r
}

func (r ApiBookingBlockscountGetRequest) Execute() (CountModel, *_nethttp.Response, error) {
	return r.ApiService.BookingBlockscountGetExecute(r)
}

/*
 * BookingBlockscountGet Returns number of blocks
 * Returns number of blocks matching the filter criteria<br>You must have at least one of these scopes: 'blocks.read, reservations.read, reservations.manage'.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiBookingBlockscountGetRequest
 */
func (a *BlockApiService) BookingBlockscountGet(ctx _context.Context) ApiBookingBlockscountGetRequest {
	return ApiBookingBlockscountGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return CountModel
 */
func (a *BlockApiService) BookingBlockscountGetExecute(r ApiBookingBlockscountGetRequest) (CountModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CountModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockApiService.BookingBlockscountGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/booking/v1/blocks/$count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.groupId != nil {
		localVarQueryParams.Add("groupId", parameterToString(*r.groupId, ""))
	}
	if r.propertyIds != nil {
		localVarQueryParams.Add("propertyIds", parameterToString(*r.propertyIds, "csv"))
	}
	if r.status != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status, "csv"))
	}
	if r.unitGroupIds != nil {
		localVarQueryParams.Add("unitGroupIds", parameterToString(*r.unitGroupIds, "csv"))
	}
	if r.ratePlanIds != nil {
		localVarQueryParams.Add("ratePlanIds", parameterToString(*r.ratePlanIds, "csv"))
	}
	if r.timeSliceDefinitionIds != nil {
		localVarQueryParams.Add("timeSliceDefinitionIds", parameterToString(*r.timeSliceDefinitionIds, "csv"))
	}
	if r.unitGroupTypes != nil {
		localVarQueryParams.Add("unitGroupTypes", parameterToString(*r.unitGroupTypes, "csv"))
	}
	if r.timeSliceTemplate != nil {
		localVarQueryParams.Add("timeSliceTemplate", parameterToString(*r.timeSliceTemplate, ""))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.to != nil {
		localVarQueryParams.Add("to", parameterToString(*r.to, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v MessageItemCollection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
