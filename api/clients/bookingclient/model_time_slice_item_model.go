/*
 * apaleo Booking API
 *
 * Resources and methods to manage guest journeys.
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bookingclient

import (
	"encoding/json"
	"time"
)

// TimeSliceItemModel struct for TimeSliceItemModel
type TimeSliceItemModel struct {
	// Date and time the time slice begins<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>
	From time.Time `json:"from"`
	// Date and time the time slice ends<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>
	To time.Time `json:"to"`
	// List of offers for this time slice
	Offers *[]TimeSliceOfferItemModel `json:"offers,omitempty"`
}

// NewTimeSliceItemModel instantiates a new TimeSliceItemModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeSliceItemModel(from time.Time, to time.Time) *TimeSliceItemModel {
	this := TimeSliceItemModel{}
	this.From = from
	this.To = to
	return &this
}

// NewTimeSliceItemModelWithDefaults instantiates a new TimeSliceItemModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeSliceItemModelWithDefaults() *TimeSliceItemModel {
	this := TimeSliceItemModel{}
	return &this
}

// GetFrom returns the From field value
func (o *TimeSliceItemModel) GetFrom() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *TimeSliceItemModel) GetFromOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *TimeSliceItemModel) SetFrom(v time.Time) {
	o.From = v
}

// GetTo returns the To field value
func (o *TimeSliceItemModel) GetTo() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *TimeSliceItemModel) GetToOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *TimeSliceItemModel) SetTo(v time.Time) {
	o.To = v
}

// GetOffers returns the Offers field value if set, zero value otherwise.
func (o *TimeSliceItemModel) GetOffers() []TimeSliceOfferItemModel {
	if o == nil || o.Offers == nil {
		var ret []TimeSliceOfferItemModel
		return ret
	}
	return *o.Offers
}

// GetOffersOk returns a tuple with the Offers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSliceItemModel) GetOffersOk() (*[]TimeSliceOfferItemModel, bool) {
	if o == nil || o.Offers == nil {
		return nil, false
	}
	return o.Offers, true
}

// HasOffers returns a boolean if a field has been set.
func (o *TimeSliceItemModel) HasOffers() bool {
	if o != nil && o.Offers != nil {
		return true
	}

	return false
}

// SetOffers gets a reference to the given []TimeSliceOfferItemModel and assigns it to the Offers field.
func (o *TimeSliceItemModel) SetOffers(v []TimeSliceOfferItemModel) {
	o.Offers = &v
}

func (o TimeSliceItemModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["from"] = o.From
	}
	if true {
		toSerialize["to"] = o.To
	}
	if o.Offers != nil {
		toSerialize["offers"] = o.Offers
	}
	return json.Marshal(toSerialize)
}

type NullableTimeSliceItemModel struct {
	value *TimeSliceItemModel
	isSet bool
}

func (v NullableTimeSliceItemModel) Get() *TimeSliceItemModel {
	return v.value
}

func (v *NullableTimeSliceItemModel) Set(val *TimeSliceItemModel) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeSliceItemModel) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeSliceItemModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeSliceItemModel(val *TimeSliceItemModel) *NullableTimeSliceItemModel {
	return &NullableTimeSliceItemModel{value: val, isSet: true}
}

func (v NullableTimeSliceItemModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeSliceItemModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


