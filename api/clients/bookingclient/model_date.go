/*
 * apaleo Booking API
 *
 * Resources and methods to manage guest journeys.
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bookingclient

import (
	"encoding/json"
)

// Date struct for Date
type Date struct {
	// The date the service is delivered
	ServiceDate string `json:"serviceDate"`
	// The number of services to book for this date. It defaults to the service offer count when not specified.
	Count *int32 `json:"count,omitempty"`
	Amount *MonetaryValueModel `json:"amount,omitempty"`
}

// NewDate instantiates a new Date object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDate(serviceDate string) *Date {
	this := Date{}
	this.ServiceDate = serviceDate
	return &this
}

// NewDateWithDefaults instantiates a new Date object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDateWithDefaults() *Date {
	this := Date{}
	return &this
}

// GetServiceDate returns the ServiceDate field value
func (o *Date) GetServiceDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceDate
}

// GetServiceDateOk returns a tuple with the ServiceDate field value
// and a boolean to check if the value has been set.
func (o *Date) GetServiceDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ServiceDate, true
}

// SetServiceDate sets field value
func (o *Date) SetServiceDate(v string) {
	o.ServiceDate = v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *Date) GetCount() int32 {
	if o == nil || o.Count == nil {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Date) GetCountOk() (*int32, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *Date) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *Date) SetCount(v int32) {
	o.Count = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *Date) GetAmount() MonetaryValueModel {
	if o == nil || o.Amount == nil {
		var ret MonetaryValueModel
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Date) GetAmountOk() (*MonetaryValueModel, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *Date) HasAmount() bool {
	if o != nil && o.Amount != nil {
		return true
	}

	return false
}

// SetAmount gets a reference to the given MonetaryValueModel and assigns it to the Amount field.
func (o *Date) SetAmount(v MonetaryValueModel) {
	o.Amount = &v
}

func (o Date) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["serviceDate"] = o.ServiceDate
	}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	return json.Marshal(toSerialize)
}

type NullableDate struct {
	value *Date
	isSet bool
}

func (v NullableDate) Get() *Date {
	return v.value
}

func (v *NullableDate) Set(val *Date) {
	v.value = val
	v.isSet = true
}

func (v NullableDate) IsSet() bool {
	return v.isSet
}

func (v *NullableDate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDate(val *Date) *NullableDate {
	return &NullableDate{value: val, isSet: true}
}

func (v NullableDate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


