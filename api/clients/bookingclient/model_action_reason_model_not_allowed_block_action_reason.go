/*
 * apaleo Booking API
 *
 * Resources and methods to manage guest journeys.
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bookingclient

import (
	"encoding/json"
)

// ActionReasonModelNotAllowedBlockActionReason struct for ActionReasonModelNotAllowedBlockActionReason
type ActionReasonModelNotAllowedBlockActionReason struct {
	Code string `json:"code"`
	Message string `json:"message"`
}

// NewActionReasonModelNotAllowedBlockActionReason instantiates a new ActionReasonModelNotAllowedBlockActionReason object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionReasonModelNotAllowedBlockActionReason(code string, message string) *ActionReasonModelNotAllowedBlockActionReason {
	this := ActionReasonModelNotAllowedBlockActionReason{}
	this.Code = code
	this.Message = message
	return &this
}

// NewActionReasonModelNotAllowedBlockActionReasonWithDefaults instantiates a new ActionReasonModelNotAllowedBlockActionReason object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionReasonModelNotAllowedBlockActionReasonWithDefaults() *ActionReasonModelNotAllowedBlockActionReason {
	this := ActionReasonModelNotAllowedBlockActionReason{}
	return &this
}

// GetCode returns the Code field value
func (o *ActionReasonModelNotAllowedBlockActionReason) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *ActionReasonModelNotAllowedBlockActionReason) GetCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *ActionReasonModelNotAllowedBlockActionReason) SetCode(v string) {
	o.Code = v
}

// GetMessage returns the Message field value
func (o *ActionReasonModelNotAllowedBlockActionReason) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ActionReasonModelNotAllowedBlockActionReason) GetMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ActionReasonModelNotAllowedBlockActionReason) SetMessage(v string) {
	o.Message = v
}

func (o ActionReasonModelNotAllowedBlockActionReason) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["code"] = o.Code
	}
	if true {
		toSerialize["message"] = o.Message
	}
	return json.Marshal(toSerialize)
}

type NullableActionReasonModelNotAllowedBlockActionReason struct {
	value *ActionReasonModelNotAllowedBlockActionReason
	isSet bool
}

func (v NullableActionReasonModelNotAllowedBlockActionReason) Get() *ActionReasonModelNotAllowedBlockActionReason {
	return v.value
}

func (v *NullableActionReasonModelNotAllowedBlockActionReason) Set(val *ActionReasonModelNotAllowedBlockActionReason) {
	v.value = val
	v.isSet = true
}

func (v NullableActionReasonModelNotAllowedBlockActionReason) IsSet() bool {
	return v.isSet
}

func (v *NullableActionReasonModelNotAllowedBlockActionReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionReasonModelNotAllowedBlockActionReason(val *ActionReasonModelNotAllowedBlockActionReason) *NullableActionReasonModelNotAllowedBlockActionReason {
	return &NullableActionReasonModelNotAllowedBlockActionReason{value: val, isSet: true}
}

func (v NullableActionReasonModelNotAllowedBlockActionReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionReasonModelNotAllowedBlockActionReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


